package com.jediexe.pouchviewer;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import lotr.client.gui.LOTRGuiPouch;
import lotr.client.gui.LOTRGuiScreenBase;
import lotr.common.inventory.LOTRContainerPouch;
import lotr.common.item.LOTRItemPouch;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.resources.I18n;
import net.minecraft.client.settings.KeyBinding;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.StatCollector;
import net.minecraftforge.client.event.GuiScreenEvent;
import net.minecraftforge.event.entity.player.ItemTooltipEvent;

public class Pouchviewer {
	
	public static Pouchviewer instance = new Pouchviewer();
	public static RenderItem renderItem = new RenderItem();
	
	static int count;
	static int usedslots;
	static int tooltiplines;
	static NBTTagList itemlist;
	ItemStack pouchitem = null;
	GuiContainer Agui = null;
	static List itemslist;
	
	static ResourceLocation guitexture = new ResourceLocation("pouchviewer:pouch.png");
	
	static String commonItems = Main.commonItems.toLowerCase();
	static String uncommonItems = Main.uncommonItems.toLowerCase();
	static String rareItems = Main.rareItems.toLowerCase();
	static String epicItems = Main.epicItems.toLowerCase();
	static String legendaryItems = Main.legendaryItems.toLowerCase();
	static String tagItemsColor = Main.tagItemsColor;
	static String slotColor = Main.slotColor;
	static String defaultColor = Main.defaultColor;
	static String commonColor = Main.commonColor;
	static String uncommonColor = Main.uncommonColor;
	static String rareColor = Main.rareColor;
	static String epicColor = Main.epicColor;
	static String legendaryColor = Main.legendaryColor;
	String[] colors = new String[]
			{"dark_red", "red", "gold", 
			"yellow", "dark_green", "green", 
			"aqua", "dark_aqua", "dark_blue", 
			"blue", "light_purple", "dark_purple", 
			"white", "gray", "dark_gray", "black"};
	String[] colorValues = new String[]
				{"4", "c", "6", 
				"e", "2", "a", 
				"b", "3", "1", 
				"9", "d", "5", 
				"f", "7", "8", "0"};
	String space = " ";
	String color = (char) 167 + "f";
	String slotColorValue = (char) 167 + "3";
	String tagItemsColorValue = (char) 167 + "9";
	
	//Checks for an event where an item tooltip is generated by the player (by hovering over items)
	@SubscribeEvent
    public void onTooltipGen(ItemTooltipEvent event){
		//Removes "ï¿½belonged to: name" description in tooltip from all items
		//Configurable in pouchviewer.cfg
		if (!Main.showOwned) {
			if(event.toolTip.toString().contains("Belonged to:")){
				int size = event.toolTip.size();
				int z = size-1;
				while (event.toolTip.toString().contains("Belonged to: ")){
					event.toolTip.remove(z);
					z-=1;
				}
				event.toolTip.remove(event.toolTip.size()-1);
			}
		}
		
		//Removes "dyed" description in tooltip from all items
		//Configurable in pouchviewer.cfg
		if (!Main.showDyed) {
			if(event.toolTip.contains("Dyed")){
				event.toolTip.remove("Dyed");
			}
		}
		
		if (Main.legacyTooltip) {

			//Check if the item player is hovering over has lotrpouchdata (is a pouch and has data)
	    	if(event.itemStack.hasTagCompound() && event.itemStack.getTagCompound().hasKey("LOTRPouchData")){
	    		
	    		//Get the nbt data of the pouch
	    		NBTTagCompound nbt = event.itemStack.getTagCompound().getCompoundTag("LOTRPouchData");
				NBTTagList items = nbt.getTagList("Items", 10);
				
				//If the pouch has an item
				if(items.tagCount()>0){
					
					//Sets the color of the slot numbers
					if (Main.showSlotNumber) {
						for (int l=0; l<colors.length;l++) {
							if (slotColor.equals(colors[l])) {
								slotColorValue = (char) 167 + colorValues[l];
								break;
							}
							else {
								slotColorValue = (char) 167 + "3";
							}
						}
					}
					
					//Adds "Items" above the listed items
					if (Main.addTagItems) {
						//Sets the color based on the config value
						for (int m=0; m<colors.length;m++) {
							if (tagItemsColor.equals(colors[m])) {
								tagItemsColorValue = (char) 167 + colorValues[m];
								break;
							}
							else {
								tagItemsColorValue = (char) 167 + "9";
							}
						}
						event.toolTip.add(new String(tagItemsColorValue + "Items"));	
					}
					
					//If player is pressing shift, list all items in the pouch
		    		if(Keyboard.isKeyDown(Main.keyBindingShowAll.getKeyCode()) && items.tagCount()>Main.defaultItemsShown){
						for (int i = 0; i < items.tagCount(); ++i) {
							NBTTagCompound itemData = items.getCompoundTagAt(i);
							byte slot = itemData.getByte("Slot");
							if (slot < 0 || slot >= 27) {
								continue;
							}
							
							
							//Chooses colors based on config
							if (Main.enableRarity) {
								for (int k=0; k<colors.length;k++) {
									if (defaultColor.equals(colors[k])) {
										color = (char) 167 + colorValues[k];
										break;
									}
									else {
										color = (char) 167 + "f";
									}
								}
								if(commonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										commonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())) {
									for (int k=0; k<colors.length;k++) {
										if (commonColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(uncommonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										uncommonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())){
									for (int k=0; k<colors.length;k++) {
										if (uncommonColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(rareItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										rareItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())){
									for (int k=0; k<colors.length;k++) {
										if (rareColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(epicItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										epicItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())) {
									for (int k=0; k<colors.length;k++) {
										if (epicColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(legendaryItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										legendaryItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())) {
									for (int k=0; k<colors.length;k++) {
										if (legendaryColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
							}
							else if (!Main.enableRarity) {
								color = (char) 167 + "f";
							}
							
							//Checks if name will be first or quantity will be first
							if (!Main.nameFirst) {
								//Checks if to display slot numbers
								if(Main.showSlotNumber) {
									if(slot<9) {
										String slotnumber = slotColorValue + "0" + (slot + 1) + (char) 167 + "f" + ": x";
										event.toolTip.add(new String(slotnumber +
											ItemStack.loadItemStackFromNBT(itemData).stackSize + space + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName())));
									}
									else {
										String slotnumber = slotColorValue + (slot + 1) + (char) 167 + "f" + ": x";
										event.toolTip.add(new String(slotnumber +
											ItemStack.loadItemStackFromNBT(itemData).stackSize + space + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName())));
									}
								}
								
								//Otherwise don't show slot numbers
								else{
									event.toolTip.add(new String((char) 167 + "f" + "x" +
										ItemStack.loadItemStackFromNBT(itemData).stackSize + space + color + 
										StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName())));
								}
							}
							else if (Main.nameFirst) {
								if(Main.showSlotNumber) {
									if(slot<9) {
										String slotnumber = slotColorValue + "0" + (slot + 1) + (char) 167 + "f" + ": ";
										event.toolTip.add(new String(slotnumber + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) + (char) 167 + "f" + " x" + 
											ItemStack.loadItemStackFromNBT(itemData).stackSize));
									}
									else {
										String slotnumber = slotColorValue + (slot + 1) + (char) 167 + "f" + ": ";
										event.toolTip.add(new String(slotnumber + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) + (char) 167 + "f" + " x" + 
											ItemStack.loadItemStackFromNBT(itemData).stackSize));
									}
								}

								else{
									event.toolTip.add(new String(color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) + (char) 167 + "f" + " x" + 
											ItemStack.loadItemStackFromNBT(itemData).stackSize));
								}
							}
						}
					}
		    		
		    		//If player is not pressing shift (default view), list only the first 5 items (edit in config)
		    		else {
		    			int j = 0;
						for (int i = 0; i < items.tagCount(); ++i) {
							NBTTagCompound itemData = items.getCompoundTagAt(i);
							byte slot = itemData.getByte("Slot");
							if (slot < 0 || slot >= 27) {
								continue;
							}
							j+=1;
							
							//Chooses colors based on config
							if (Main.enableRarity) {
								for (int k=0; k<colors.length;k++) {
									if (defaultColor.equals(colors[k])) {
										color = (char) 167 + colorValues[k];
										break;
									}
									else {
										color = (char) 167 + "f";
									}
								}
								if(commonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										commonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())) {
									for (int k=0; k<colors.length;k++) {
										if (commonColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(uncommonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										uncommonItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())){
									for (int k=0; k<colors.length;k++) {
										if (uncommonColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(rareItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										rareItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())){
									for (int k=0; k<colors.length;k++) {
										if (rareColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(epicItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										epicItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())) {
									for (int k=0; k<colors.length;k++) {
										if (epicColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
								else if(legendaryItems.contains(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) ||
										legendaryItems.contains(ItemStack.loadItemStackFromNBT(itemData).getDisplayName().toString().toLowerCase())) {
									for (int k=0; k<colors.length;k++) {
										if (legendaryColor.equals(colors[k])) {
											color = (char) 167 + colorValues[k];
											break;
										}
										else {
											color = (char) 167 + "f";
										}
									}
								}
							}
							else if (!Main.enableRarity) {
								color = (char) 167 + "f";
							}
							
							//Checks if name will be first or quantity will be first
							if (!Main.nameFirst) {
								if(Main.showSlotNumber && j<=Main.defaultItemsShown) {
									if(slot<9) {
										String slotnumber = slotColorValue + "0" + (slot + 1) + (char) 167 + "f" + ": x";
										event.toolTip.add(new String(slotnumber + 
											ItemStack.loadItemStackFromNBT(itemData).stackSize + space + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName())));
									}
									else {
										String slotnumber = slotColorValue + (slot + 1) + (char) 167 + "f" + ": x";
										event.toolTip.add(new String(slotnumber + 
											ItemStack.loadItemStackFromNBT(itemData).stackSize + space + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName())));
									}
								}
								
								else if(j<=Main.defaultItemsShown){
									event.toolTip.add(new String((char) 167 + "f" + "x" + 
										ItemStack.loadItemStackFromNBT(itemData).stackSize + space + color + 
										StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName())));
								}
							}
							else if (Main.nameFirst){
								if(Main.showSlotNumber && j<=Main.defaultItemsShown) {
									if(slot<9) {
										String slotnumber = slotColorValue + "0" + (slot + 1) + (char) 167 + "f" + ": ";
										event.toolTip.add(new String(slotnumber + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) + (char) 167 + "f" + " x" +
											ItemStack.loadItemStackFromNBT(itemData).stackSize));
									}
									else {
										String slotnumber = slotColorValue + (slot + 1) + (char) 167 + "f" + ": x";
										event.toolTip.add(new String(slotnumber + color + 
											StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) + (char) 167 + "f" + " x" +
											ItemStack.loadItemStackFromNBT(itemData).stackSize));
									}
								}
								
								else if(j<=Main.defaultItemsShown){
									event.toolTip.add(new String(color + 
										StatCollector.translateToLocal(ItemStack.loadItemStackFromNBT(itemData).getUnlocalizedName()) + (char) 167 + "f" + " x" + 
											//translate to local find out how to translate fromlang file
										ItemStack.loadItemStackFromNBT(itemData).stackSize));
								}
							}
							else {
								continue;
							}
						}
						
						//Add "and #x more..." to the end of the default view
						if((items.tagCount()-Main.defaultItemsShown)!=0 && j>Main.defaultItemsShown){
							event.toolTip.add(new String((char) 167 + "o" + I18n.format("pouchviewer.legacytooltip.leftover", (items.tagCount()-Main.defaultItemsShown))));
						}
		    		}
				}
	    	}
	    	//Makes it display things for any item with the NBT tag 'items'
	    	else if(event.itemStack.hasTagCompound() && !event.itemStack.getTagCompound().hasKey("LOTRPouchData") && event.itemStack.getTagCompound().hasKey("Items")){
	    		
	    		NBTTagCompound NBTTagCompound = event.itemStack.getTagCompound();
	    		NBTTagList tagList = NBTTagCompound.getTagList("Items", 10);
	    		
	    		if(tagList.tagCount()>0){
	    			
	    			event.toolTip.add(new String((char) 167 + "9" + "Items"));
	    			
		    		if(Keyboard.isKeyDown(Main.keyBindingShowAll.getKeyCode()) && tagList.tagCount()>Main.defaultItemsShown){
			    		for (int i = 0; i < tagList.tagCount(); ++i) {
							NBTTagCompound itemData = tagList.getCompoundTagAt(i);
							byte slot = itemData.getByte("Slot");
							if (slot < 0 || slot >= 27) {
								continue;
							}
							if(Main.showSlotNumber) {
								if(i<9) {
									String slotnumber = (char) 167 + "3" + "0" + (i+1) + (char) 167 + "f" + ": x";
									event.toolTip.add(new String(slotnumber + 
										ItemStack.loadItemStackFromNBT(itemData).stackSize + " " +
										ItemStack.loadItemStackFromNBT(itemData).getDisplayName()));
								}
								else {
									String slotnumber = (char) 167 + "3" + (i+1) + (char) 167 + "f" + ": x";
									event.toolTip.add(new String(slotnumber + 
										ItemStack.loadItemStackFromNBT(itemData).stackSize + " " +
										ItemStack.loadItemStackFromNBT(itemData).getDisplayName()));
								}
							}
							else{
								event.toolTip.add(new String((char) 167 + "f" + "x" + 
									ItemStack.loadItemStackFromNBT(itemData).stackSize + " " + 
									ItemStack.loadItemStackFromNBT(itemData).getDisplayName()));
							}
			    		}
		    		}
		    		else{
		    			int j=0;
			    		for (int i = 0; i < tagList.tagCount(); ++i) {
							NBTTagCompound itemData = tagList.getCompoundTagAt(i);
							byte slot = itemData.getByte("Slot");
							if (slot < 0 || slot >= 27) {
								continue;
							}
							j+=1;
							if(Main.showSlotNumber && j<=Main.defaultItemsShown) {
								if(i<9) {
									String slotnumber = (char) 167 + "3" + "0" + (i+1) + (char) 167 + "f" + ": x";
									event.toolTip.add(new String(slotnumber + 
										ItemStack.loadItemStackFromNBT(itemData).stackSize + " " +
										ItemStack.loadItemStackFromNBT(itemData).getDisplayName()));
								}
								else {
									String slotnumber = (char) 167 + "3" + (i+1) + (char) 167 + "f" + ": x";
									event.toolTip.add(new String(slotnumber + 
										ItemStack.loadItemStackFromNBT(itemData).stackSize + " " +
										ItemStack.loadItemStackFromNBT(itemData).getDisplayName()));
								}
							}
							else if(j<=Main.defaultItemsShown){
								event.toolTip.add(new String((char) 167 + "f" + "x" + 
									ItemStack.loadItemStackFromNBT(itemData).stackSize + " " + 
									ItemStack.loadItemStackFromNBT(itemData).getDisplayName()));
							}
							else {
								continue;
							}
			    		}
			    		if((tagList.tagCount()-Main.defaultItemsShown)!=0 && j>Main.defaultItemsShown){
							event.toolTip.add(new String((char) 167 + "o" + "and " + (tagList.tagCount()-Main.defaultItemsShown) + " more..."));
						}
		    		}
		    	}
	    	}
		}
		
		else {
			if(event.itemStack.hasTagCompound() && event.itemStack.getTagCompound().hasKey("LOTRPouchData")){
	    		NBTTagCompound nbt = event.itemStack.getTagCompound().getCompoundTag("LOTRPouchData");
				NBTTagList items = nbt.getTagList("Items", 10);
				if(items.tagCount()>0 && event.toolTip!=null){
					//Make a list of the slots with null in slots that don't have items
					ArrayList<NBTTagCompound> list = new ArrayList<NBTTagCompound>();
					itemlist = items;
					count = LOTRItemPouch.getCapacity(event.itemStack);
					int empty = 0;
					for (int j=0; j<count; j++) {
						list.add(j, itemlist.getCompoundTagAt(j));
					}
					for (int y=0; y<count; y++) {
						if (!list.get(y).toString().contains("Slot:"+y+"b")) {
							list.add(y, null);
							empty+=1;
						}
					}
					itemslist = list;
					usedslots = count-empty;
					
					//Set the pouch item and get capacity
					LOTRItemPouch pouch = (LOTRItemPouch)event.itemStack.getItem();
					pouchitem = event.itemStack;
					
					//Replace existing tooltip
					int rows = pouch.getCapacity(event.itemStack)/9;
					event.toolTip.clear();
					if (Main.showDyed && pouch.isPouchDyed(pouchitem)) {
						event.toolTip.add(event.itemStack.getDisplayName() + " - Dyed (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")");
					}
					else {
						event.toolTip.add(event.itemStack.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")");
					}
					
					//Tooltip spacing stuff
					if (Main.showEmptySlots) {
						for (int i=0; i<=(rows); i++) {
							event.toolTip.add("                                        ");
						}
						if (count==27 || count==18) {
							event.toolTip.add("                                        ");
						}
					}
					if (!Main.showEmptySlots) {
						event.toolTip.add("                                        ");
						event.toolTip.add("                                        ");
						if (usedslots>9) {
							event.toolTip.add("                                        ");
							event.toolTip.add("                                        ");
						}
						if (usedslots>18) {
							event.toolTip.add("                                        ");
							event.toolTip.add("                                        ");
						}
					}
					
					//Add belonged to text
					if (Main.showOwned && event.itemStack.getTagCompound().hasKey("LOTRPrevOwnerList")) {
						NBTTagCompound nbto = event.itemStack.getTagCompound();
						ArrayList<String> owners = new ArrayList<>();
						NBTTagList tagList = nbto.getTagList("LOTRPrevOwnerList", 8);
						for (int i = 0; i < tagList.tagCount(); ++i) {
							String owner = tagList.getStringTagAt(i);
							owners.add(owner);
						}
						String o = owners.get(owners.size()-1);
						event.toolTip.add("Owned by: " + o.split(",")[0]);
						if (o.split(",")[1].length()>30) {
							event.toolTip.add((o.split(",")[1]).split(" ", 2)[0]);
							event.toolTip.add((o.split(",")[1]).split(" ", 2)[1]);
						}
						else {
							event.toolTip.add(o.split(",")[1]);
						}
					}
					
					//Finish off by counting tooltip lines
					tooltiplines = event.toolTip.size();
				}
				else {
					pouchitem=null;
				}
			}
			else {
				pouchitem=null;
			}
		}
	}
	
	//Checks if its in a container and should render items
	@SubscribeEvent
	public void checkContainer(final GuiScreenEvent.DrawScreenEvent.Post event) {
		if (event.gui instanceof GuiContainer) {
			Agui = (GuiContainer)event.gui;
		}
		else {
			Agui = null;
		}
		//Call the rendering of items after tooltip gen so items render above other things
		if (Agui!=null) {
			Slot slot = null;
			//Check all the slots for the pouch
			for (int i = 0; i < Agui.inventorySlots.inventorySlots.size(); i++) {
				slot = Agui.inventorySlots.getSlot(i);
				if (slot!=null) {
					if (slot.getStack()!=null) {
						//First check if the item is a pouch, check that the cursor isn't holding an item, check that the item is the same as the pouch whose tooltip is being rendered
						if (slot.getStack().getItem() instanceof LOTRItemPouch && Minecraft.getMinecraft().thePlayer.inventory.getItemStack()==null && slot.getStack() == pouchitem) {
							if (pouchitem!=null) {
								if (slot.getStack()==pouchitem) {
									draw();
									//Set pouch item to null after drawing,
									//otherwise it will keep drawing items even if not hovering
									//Force the tooltip to keep telling the gui that there is a pouch tooltip being rendered
									pouchitem=null;
								}
							}
						}
					}
				}
			}
		}
	}
	
	public static void drawBackground(int x, int y) {
		RenderHelper.enableGUIStandardItemLighting();
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        GL11.glEnable(32826);
        GL11.glDisable(2896);
        GL11.glEnable(3042);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GL11.glBlendFunc(770, 771);
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        GL11.glPushMatrix();
        GL11.glDisable(3008);
        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, 240.0f, 240.0f);
        Minecraft.getMinecraft().renderEngine.bindTexture(guitexture);
        Gui gui = new Gui();
		gui.drawTexturedModalRect(x, y, 0, 0, 162, 18);
		GL11.glDisable(3042);
        GL11.glEnable(2929);
        GL11.glDisable(32826);
        GL11.glDepthMask(true);
        GL11.glPopMatrix();
        RenderHelper.disableStandardItemLighting();
    }
	
	public static void draw() {
		ScaledResolution sr = new ScaledResolution(Minecraft.getMinecraft(), Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight);
		int sw = sr.getScaledWidth();
	    int sh = sr.getScaledHeight();
	    int mx = Mouse.getX() * sw / Minecraft.getMinecraft().displayWidth;
	    int my = sh - Mouse.getY() * sh / Minecraft.getMinecraft().displayHeight;
	    
	    if (Main.showEmptySlots) {
		    //Get y pos and follow the tooltip if it collides with bottom of screen, based on tooltip length
		    int lf = 0;
		    if (count==27) {
		    	lf=5;
		    }
		    if (count==18) {
		    	lf=1;
		    }
		    my-=lf;
		    int a = tooltiplines*10 -5 + lf;
		    if (my+a>sh && count==27) {
				my=sh-a;
			}
		    int b = tooltiplines*10 - 5 + lf;
			if (my+b>sh && count==18) {
				my=sh-b;
			}
			
			//Follow the tooltip back around if it collides with right boundary
			if (mx+180>sw) {
				mx=mx-184;
			}
			/*
			//Draw background gui
			if (count==9) {
				drawBackground(mx+11,my);
			}
			if (count==18) {
				drawBackground(mx+11,my);
				drawBackground(mx+11,my+18);
			}
			if (count==27) {
				drawBackground(mx+11,my);
				drawBackground(mx+11,my+18);
				drawBackground(mx+11,my+36);
			}
			*/
			//Draw each item
			for (int i = 0; i < count; ++i) {
				ItemStack item = null;
				if (itemslist.get(i)==null) {
					continue;
				}
				else {
					NBTTagCompound itemData = (NBTTagCompound) itemslist.get(i);
					item = ItemStack.loadItemStackFromNBT(itemData);
				}
				
				//Row 1
				if (((i)/9)==0) {
					renderItem(renderItem, 
							Minecraft.getMinecraft().fontRenderer, 
							Minecraft.getMinecraft().getTextureManager(), 
							item, mx+12+(i*18), my);
				}
				
				//Row 2
				if ((i)/9==1) {
					renderItem(renderItem, 
							Minecraft.getMinecraft().fontRenderer, 
							Minecraft.getMinecraft().getTextureManager(), 
							item, mx+12+((i-9)*18), my+18);
				}
				
				//Row 3
				if ((i)/9==2) {
					renderItem(renderItem, 
							Minecraft.getMinecraft().fontRenderer, 
							Minecraft.getMinecraft().getTextureManager(), 
							item, mx+12+((i-18)*18), my+36);
				}
			}
	    }
	    else {
	    	//Get y pos and follow the tooltip if it collides with bottom of screen, based on tooltip length
		    int lf = 0;
		    if (usedslots>18) lf=5;
		    if (usedslots>9) lf=1;
		    my-=lf;
		    int a = tooltiplines*10 -5 + lf;
		    if (my+a>sh && usedslots>18) {
				my=sh-a;
			}
		    int b = tooltiplines*10 - 5 + lf;
			if (my+b>sh && usedslots>9) {
				my=sh-b;
			}
			
			//Follow the tooltip back around if it collides with right boundary
			if (mx+180>sw) {
				mx=mx-184;
			}
			
			//Draw each item
			for (int i = 0; i < usedslots; ++i) {
				ItemStack item = null;
				NBTTagCompound itemData = (NBTTagCompound) itemlist.getCompoundTagAt(i);
				item = ItemStack.loadItemStackFromNBT(itemData);
				renderItem(renderItem, 
						Minecraft.getMinecraft().fontRenderer, 
						Minecraft.getMinecraft().getTextureManager(), 
						item, mx+12+(i*18), my);
				
				//Row 2
				if (usedslots>i && i==8) {
					my+=18;
					mx-=162;
				}
				
				//Row 3
				if (usedslots>i && i==17) {
					my+=18;
					mx-=162;
				}
			}
	    }
	}
	
	public static void renderItem(final RenderItem ri, final FontRenderer fr, final TextureManager tm, final ItemStack item, final int x, final int y) {
        RenderHelper.enableGUIStandardItemLighting();
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        GL11.glEnable(32826);
        GL11.glDisable(2896);
        GL11.glEnable(3042);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GL11.glBlendFunc(770, 771);
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        GL11.glPushMatrix();
        GL11.glDisable(3008);
        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, 240.0f, 240.0f);
        ri.renderItemAndEffectIntoGUI(fr, tm, item, x, y);
    	ri.renderItemOverlayIntoGUI(fr, tm, item, x, y);
    	GL11.glDisable(3042);
        GL11.glEnable(2929);
        GL11.glDisable(32826);
        GL11.glDepthMask(true);
        GL11.glPopMatrix();
        RenderHelper.disableStandardItemLighting();
    }

	//Called when config updates
	public static void update() {
		commonItems = Main.commonItems.toLowerCase();
		uncommonItems = Main.uncommonItems.toLowerCase();
		rareItems = Main.rareItems.toLowerCase();
		epicItems = Main.epicItems.toLowerCase();
		legendaryItems = Main.legendaryItems.toLowerCase();
		tagItemsColor = Main.tagItemsColor;
		slotColor = Main.slotColor;
		defaultColor = Main.defaultColor;
		commonColor = Main.commonColor;
		uncommonColor = Main.uncommonColor;
		rareColor = Main.rareColor;
		epicColor = Main.epicColor;
		legendaryColor = Main.legendaryColor;
	}
}