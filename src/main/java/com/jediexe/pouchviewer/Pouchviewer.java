package com.jediexe.pouchviewer;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import lotr.common.item.LOTRItemPouch;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.FontRenderer;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.entity.RenderItem;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.resources.I18n;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.GuiScreenEvent;
import net.minecraftforge.event.entity.player.ItemTooltipEvent;

public class Pouchviewer {
	
	public static Pouchviewer instance = new Pouchviewer();
	public static RenderItem renderItem = new RenderItem();
	
	static int count;
	static int usedslots;
	static int tooltiplines;
	static ItemStack pouchitem = null;
	static LOTRItemPouch pouch = null;
	
	static List itemslist;
	static List<String> tooltiplist;
	static NBTTagList itemlist;
	
	GuiContainer Agui = null;
	
	static ResourceLocation pouchtexture = new ResourceLocation("pouchviewer:pouch.png");
	
	//Checks for an event where an item tooltip is generated by the player (by hovering over items)
	@SubscribeEvent
    public void onTooltipGen(ItemTooltipEvent event){
		//Removes "ï¿½belonged to: name" description in tooltip from all items
		if (!Main.showOwned) {
			if(event.toolTip.toString().contains("Belonged to:")){
				int size = event.toolTip.size();
				int z = size-1;
				while (event.toolTip.toString().contains("Belonged to: ")){
					event.toolTip.remove(z);
					z-=1;
				}
				event.toolTip.remove(event.toolTip.size()-1);
			}
		}
		
		//Removes "dyed" description in tooltip from all items
		if (!Main.showDyed) {
			if(event.toolTip.contains("Dyed")){
				event.toolTip.remove("Dyed");
			}
		}
		
		//Check if item is a LOTR pouch with items in it
		if(event.itemStack.hasTagCompound() && event.itemStack.getTagCompound().hasKey("LOTRPouchData")){
    		NBTTagCompound nbt = event.itemStack.getTagCompound().getCompoundTag("LOTRPouchData");
			NBTTagList items = nbt.getTagList("Items", 10);
			//If pouch has an item in it
			if(items.tagCount()>0 && event.toolTip!=null){
				//Make a list of the slots with null in slots that don't have items
				ArrayList<NBTTagCompound> list = new ArrayList<NBTTagCompound>();
				itemlist = items;
				count = LOTRItemPouch.getCapacity(event.itemStack);
				int empty = 0;
				for (int j=0; j<count; j++) {
					list.add(j, itemlist.getCompoundTagAt(j));
				}
				for (int y=0; y<count; y++) {
					if (!list.get(y).toString().contains("Slot:"+y+"b")) {
						list.add(y, null);
						empty+=1;
					}
				}
				itemslist = list;
				usedslots = count-empty;
				
				//Set the pouch item and get capacity
				pouch = (LOTRItemPouch)event.itemStack.getItem();
				int rows = pouch.getCapacity(event.itemStack)/9;
				pouchitem = event.itemStack;
				
				//Replace existing tooltip
				int size = event.toolTip.size();
				int z = size-1;
				while (event.toolTip.size()>1){
					event.toolTip.remove(z);
					z-=1;
				}
				event.toolTip.remove(event.toolTip.size()-1);
				if (!Main.showDyed) {
					event.toolTip.add(0, event.itemStack.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")");
				}
				else {
					if (pouch.isPouchDyed(pouchitem)) {
						event.toolTip.add(0, event.itemStack.getDisplayName() + " - " + I18n.format("item.lotr.pouch.dyed") + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")");
					}
					else {
						event.toolTip.add(0, event.itemStack.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")");
					}
				}
				
				//Tooltip spacing stuff
				if (!Main.showBackground || (Main.showBackground && !Main.fancyBorders)) {
					if (Main.showEmptySlots) {
						event.toolTip.add("           ");
						for (int i=0; i<=(rows-1); i++) {
							event.toolTip.add("                                        ");
						}
						if (count==18) {
							event.toolTip.add("                                        ");
						}
						if (count==27) {
							event.toolTip.add("                                        ");
							event.toolTip.add("                                        ");
						}
					}
					if (!Main.showEmptySlots) {
						event.toolTip.add("                                        ");
						event.toolTip.add("                                        ");
						if (usedslots>9) {
							event.toolTip.add("                                        ");
							event.toolTip.add("                                        ");
						}
						if (usedslots>18) {
							event.toolTip.add("                                        ");
							event.toolTip.add("                                        ");
						}
					}
				}
				if (Main.fancyBorders && Main.showBackground) {
					event.toolTip.add("          ");
					event.toolTip.add("                                        ");
					event.toolTip.remove(0);
				}
				
				//Add belonged to text
				if (Main.showOwned && event.itemStack.getTagCompound().hasKey("LOTRPrevOwnerList") && !Main.fancyBorders) {
					NBTTagCompound nbto = event.itemStack.getTagCompound();
					ArrayList<String> owners = new ArrayList<>();
					NBTTagList tagList = nbto.getTagList("LOTRPrevOwnerList", 8);
					for (int i = 0; i < tagList.tagCount(); ++i) {
						String owner = tagList.getStringTagAt(i);
						owners.add(owner);
					}
					String o = owners.get(owners.size()-1);
					event.toolTip.add("Owned by: " + o.split(",")[0]);
					if (o.split(",")[1].length()>30) {
						event.toolTip.add((o.split(",")[1]).split(" ", 2)[0]);
						event.toolTip.add((o.split(",")[1]).split(" ", 2)[1]);
					}
					else {
						event.toolTip.add(o.split(",")[1]);
					}
				}
				
				//Finish off by counting tooltip lines
				tooltiplines = event.toolTip.size();
				tooltiplist = event.toolTip;
			}
			else {
				pouchitem=null;
			}
		}
		else {
			pouchitem=null;
		}
	}
	
	//Checks if its in a container and should render items
	@SubscribeEvent
	public void checkContainer(final GuiScreenEvent.DrawScreenEvent.Post event) {
		if (event.gui instanceof GuiContainer) {
			Agui = (GuiContainer)event.gui;
		}
		else {
			Agui = null;
		}
		//Call the rendering of items after tooltip gen so items render above other things
		if (Agui!=null) {
			Slot slot = null;
			//Check all the slots for the pouch
			for (int i = 0; i < Agui.inventorySlots.inventorySlots.size(); i++) {
				slot = Agui.inventorySlots.getSlot(i);
				if (slot!=null) {
					if (slot.getStack()!=null) {
						//First check if the item is a pouch, check that the cursor isn't holding an item, check that the item is the same as the pouch whose tooltip is being rendered
						if (slot.getStack().getItem() instanceof LOTRItemPouch && Minecraft.getMinecraft().thePlayer.inventory.getItemStack()==null && slot.getStack() == pouchitem) {
							if (pouchitem!=null) {
								if (slot.getStack()==pouchitem) {
									draw();
									//Set pouch item to null after drawing,
									//otherwise it will keep drawing items even if not hovering
									//Force the tooltip to keep telling the gui that there is a pouch tooltip being rendered
									pouchitem=null;
								}
							}
						}
					}
				}
			}
		}
	}
	
	public static void draw() {
		ScaledResolution sr = new ScaledResolution(Minecraft.getMinecraft(), Minecraft.getMinecraft().displayWidth, Minecraft.getMinecraft().displayHeight);
		int sw = sr.getScaledWidth();
	    int sh = sr.getScaledHeight();
	    int mx = Mouse.getX() * sw / Minecraft.getMinecraft().displayWidth;
	    int my = sh - Mouse.getY() * sh / Minecraft.getMinecraft().displayHeight;
	    
	    if (Main.showEmptySlots) {
		    //Get y pos and follow the tooltip if it collides with bottom of screen, based on tooltip length
		    my-=1;
		    int a = tooltiplines*10 - 4;
		    if (my+a>sh && count==27) {
				my=sh-a;
			}
		    int b = tooltiplines*10 - 4;
			if (my+b>sh && count==18) {
				my=sh-b;
			}
			
			//Follow the tooltip back around if it collides with right boundary
			if (mx+180>sw) {
				mx=mx-180;
				if (!Main.fancyBorders) {
					mx=mx-4;
				}
			}
			
			//Draw background gui
			if (Main.showBackground) {
				if (count==9) {
					drawBackground(mx+11,my, 7, 97, 162, 18);
				}
				if (count==18) {
					drawBackground(mx+11,my, 7, 97, 162, 36);
				}
				if (count==27) {
					drawBackground(mx+11,my, 7, 97, 162, 54);
				}
				if (Main.fancyBorders) {
					if (Main.showOwned && pouchitem.getTagCompound().hasKey("LOTRPrevOwnerList")) {
						String[] owner = pouchitem.getTagCompound().getTag("LOTRPrevOwnerList").toString().substring(4, pouchitem.getTagCompound().getTag("LOTRPrevOwnerList").toString().length()-2).split(", the ");
						if (count==9) {
							//Bottom padding
							drawBackground(mx+11,my+18, 7, 5, 176, 9);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 32);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 32);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+27, 0, 173, 176, 7);
							if (Main.complicatedOwner) {
								drawText(owner[0] + " " + owner[1], mx+11, my+20);
							}
							else {
								drawText(owner[1], mx+11, my+20);
							}
						}
						if (count==18) {
							//Bottom padding
							drawBackground(mx+11,my+36, 7, 5, 176, 9);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 50);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 50);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+45, 0, 173, 176, 7);
							if (Main.complicatedOwner) {
								drawText(owner[0] + " " + owner[1], mx+11, my+38);
							}
							else {
								drawText(owner[1], mx+11, my+38);
							}
						}
						if (count==27) {
							//Bottom padding
							drawBackground(mx+11,my+54, 7, 5, 176, 9);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 68);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 68);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+63, 0, 173, 176, 7);
							if (Main.complicatedOwner) {
								drawText(owner[0] + " " + owner[1], mx+11, my+56);
							}
							else {
								drawText(owner[1], mx+11, my+56);
							}
						}
					}
					else {
						if (count==9) {
							//Bottom padding
							drawBackground(mx+11,my+18, 7, 5, 176, 4);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 27);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 27);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+22, 0, 173, 176, 7);
						}
						if (count==18) {
							//Bottom padding
							drawBackground(mx+11,my+36, 7, 5, 176, 4);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 45);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 45);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+40, 0, 173, 176, 7);
						}
						if (count==27) {
							//Bottom padding
							drawBackground(mx+11,my+54, 7, 5, 176, 9);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 63);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 63);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+58, 0, 173, 176, 7);
						}
					}
					if (!Main.showDyed) {
						drawText(pouchitem.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")", mx+11, my-11);
					}
					else {
						if (pouch.isPouchDyed(pouchitem)) {
							drawText(pouchitem.getDisplayName() + " - " + I18n.format("item.lotr.pouch.dyed") + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")", mx+11, my-11);
						}
						else {
							drawText(pouchitem.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")", mx+11, my-11);
						}
					}
				}
			}

			//Draw each item
			for (int i = 0; i < count; ++i) {
				ItemStack item = null;
				if (itemslist.get(i)==null) {
					continue;
				}
				else {
					NBTTagCompound itemData = (NBTTagCompound) itemslist.get(i);
					item = ItemStack.loadItemStackFromNBT(itemData);
				}
				if (((i)/9)==0) {
					renderItem(renderItem, 
							Minecraft.getMinecraft().fontRenderer, 
							Minecraft.getMinecraft().getTextureManager(), 
							item, mx+12+(i*18), my);
				}
				if ((i)/9==1) {
					renderItem(renderItem, 
							Minecraft.getMinecraft().fontRenderer, 
							Minecraft.getMinecraft().getTextureManager(), 
							item, mx+12+((i-9)*18), my+18);
				}
				if ((i)/9==2) {
					renderItem(renderItem, 
							Minecraft.getMinecraft().fontRenderer, 
							Minecraft.getMinecraft().getTextureManager(), 
							item, mx+12+((i-18)*18), my+36);
				}
			}
	    }
	    
	    //If empty slots are not showing (compressed tooltip)
	    else {
	    	//Get y pos and follow the tooltip if it collides with bottom of screen, based on tooltip length
		    my-=1;
		    int a = tooltiplines*10 - 4;
		    if (my+a>sh && usedslots>18) {
				my=sh-a;
			}
		    int b = tooltiplines*10 - 4;
			if (my+b>sh && usedslots>9) {
				my=sh-b;
			}
			
			//Follow the tooltip back around if it collides with right boundary
			if (mx+180>sw) {
				mx=mx-180;
				if (!Main.fancyBorders) {
					mx=mx-4;
				}
			}

			//Draw background gui
			if (Main.showBackground) {
				if (usedslots<=9) {
					drawBackground(mx+11,my, 7, 97, 162, 18);
				}
				if (usedslots>9) {
					drawBackground(mx+11,my, 7, 97, 162, 36);
				}
				if (usedslots>18) {
					drawBackground(mx+11,my, 7, 97, 162, 54);
				}
				if (Main.fancyBorders) {
					if (Main.showOwned && pouchitem.getTagCompound().hasKey("LOTRPrevOwnerList")) {
						String[] owner = pouchitem.getTagCompound().getTag("LOTRPrevOwnerList").toString().substring(4, pouchitem.getTagCompound().getTag("LOTRPrevOwnerList").toString().length()-2).split(", the ");
						if (usedslots>18) {
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 63);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 63);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+58, 0, 173, 176, 7);
							//Bottom padding
							drawBackground(mx+11,my+54, 7, 5, 176, 4);
							if (Main.complicatedOwner) {
								drawText(owner[0] + " " + owner[1], mx+11, my+56);
							}
							else {
								drawText(owner[1], mx+11, my+56);
							}
						}
						else {
							if (usedslots>9) {
								//Left border
								drawBackground(mx+4,my-2, 0, 97, 7, 45);
								//Right border
								drawBackground(mx+173,my-2, 169, 97, 7, 45);
								//Top border
								drawBackground(mx+4,my-16, 0, 0, 176, 16);
								//Bottom border
								drawBackground(mx+4,my+40, 0, 173, 176, 7);
								//Bottom padding
								drawBackground(mx+11,my+36, 7, 5, 176, 4);
								if (Main.complicatedOwner) {
									drawText(owner[0] + " " + owner[1], mx+11, my+38);
								}
								else {
									drawText(owner[1], mx+11, my+38);
								}
							}
							else {
								if (usedslots<=9) {
									//Left border
									drawBackground(mx+4,my-2, 0, 97, 7, 27);
									//Right border
									drawBackground(mx+173,my-2, 169, 97, 7, 27);
									//Top border
									drawBackground(mx+4,my-16, 0, 0, 176, 16);
									//Bottom border
									drawBackground(mx+4,my+22, 0, 173, 176, 7);
									//Bottom padding
									drawBackground(mx+11,my+18, 7, 5, 176, 4);
									if (Main.complicatedOwner) {
										drawText(owner[0] + " " + owner[1], mx+11, my+20);
									}
									else {
										drawText(owner[1], mx+11, my+20);
									}
								}
							}
						}
					}
					if (!Main.showOwned) {
						if (usedslots>18) {
							//Bottom padding
							drawBackground(mx+11,my+54, 7, 5, 176, 9);
							//Left border
							drawBackground(mx+4,my-2, 0, 97, 7, 63);
							//Right border
							drawBackground(mx+173,my-2, 169, 97, 7, 63);
							//Top border
							drawBackground(mx+4,my-16, 0, 0, 176, 16);
							//Bottom border
							drawBackground(mx+4,my+58, 0, 173, 176, 7);
						}
						else {
							if (usedslots>9) {
								//Bottom padding
								drawBackground(mx+11,my+36, 7, 5, 176, 4);
								//Left border
								drawBackground(mx+4,my-2, 0, 97, 7, 45);
								//Right border
								drawBackground(mx+173,my-2, 169, 97, 7, 45);
								//Top border
								drawBackground(mx+4,my-16, 0, 0, 176, 16);
								//Bottom border
								drawBackground(mx+4,my+40, 0, 173, 176, 7);
							}
							else {
								if (usedslots<=9) {
									//Bottom padding
									drawBackground(mx+11,my+18, 7, 5, 176, 4);
									//Left border
									drawBackground(mx+4,my-2, 0, 97, 7, 27);
									//Right border
									drawBackground(mx+173,my-2, 169, 97, 7, 27);
									//Top border
									drawBackground(mx+4,my-16, 0, 0, 176, 16);
									//Bottom border
									drawBackground(mx+4,my+22, 0, 173, 176, 7);
								}
							}
						}
					}
					if (!Main.showDyed) {
						drawText(pouchitem.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")", mx+11, my-11);
					}
					else {
						if (pouch.isPouchDyed(pouchitem)) {
							drawText(pouchitem.getDisplayName() + " - " + I18n.format("item.lotr.pouch.dyed") + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")", mx+11, my-11);
						}
						else {
							drawText(pouchitem.getDisplayName() + " (" + usedslots + "/" + pouch.getCapacity(pouchitem) + ")", mx+11, my-11);
						}
					}
				}
			}
			
			//Draw each item
			for (int i = 0; i < usedslots; ++i) {
				ItemStack item = null;
				NBTTagCompound itemData = (NBTTagCompound) itemlist.getCompoundTagAt(i);
				item = ItemStack.loadItemStackFromNBT(itemData);
				renderItem(renderItem, 
						Minecraft.getMinecraft().fontRenderer, 
						Minecraft.getMinecraft().getTextureManager(), 
						item, mx+12+(i*18), my);
				if (usedslots>i && i==8) {
					my+=18;
					mx-=162;
				}
				if (usedslots>i && i==17) {
					my+=18;
					mx-=162;
				}
			}
	    }
	}
	
	public static void renderItem(final RenderItem ri, final FontRenderer fr, final TextureManager tm, final ItemStack item, final int x, final int y) {
		RenderHelper.enableGUIStandardItemLighting();
        GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
        GL11.glEnable(32826);
        GL11.glEnable(3042);
        GL11.glDisable(2929);
        GL11.glDepthMask(false);
        GL11.glBlendFunc(770, 771);
        GL11.glPushMatrix();
        GL11.glDisable(3008);
        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, 240.0f, 240.0f);
		ri.renderItemAndEffectIntoGUI(fr, tm, item, x, y);
    	ri.renderItemOverlayIntoGUI(fr, tm, item, x, y);
    	GL11.glDisable(3042);
        GL11.glEnable(2929);
        GL11.glDisable(32826);
        GL11.glDepthMask(true);
        GL11.glPopMatrix();
    	RenderHelper.disableStandardItemLighting();
    }
	
	public static void drawBackground(int x, int y, int a, int b, int aa, int bb) {
		RenderHelper.enableGUIStandardItemLighting();
		if (Main.usePouchColor) {
			try {
				int color = pouch.getPouchColor(pouchitem);
				String hex = ("#" + Integer.toHexString(color));
				if (hex.length()!=6 && hex.startsWith("#ff")) {
					hex = hex.replaceFirst("#ff", "#");
				}
				Color pouchcolor = Color.decode(hex);
				float red = (float)Color.decode(hex).getRed();
			    float green = (float)Color.decode(hex).getGreen();
			    float blue = (float)Color.decode(hex).getBlue();
				GL11.glColor4f(red/255.0f, green/255.0f, blue/255.0f, 1.0f);
			}
			catch (Exception e){
				GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
				System.err.println(e);
			}
		}
		else {
			GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
		}
		GL11.glEnable(32826);
        GL11.glDisable(2929);
        GL11.glDisable(2896);
        GL11.glDepthMask(false);
        Minecraft.getMinecraft().renderEngine.bindTexture(pouchtexture);
        Gui gui = new Gui();
        gui.drawTexturedModalRect(x, y-1, a, b, aa, bb);
        GL11.glEnable(2929);
        GL11.glEnable(2896);
        GL11.glDisable(32826);
        GL11.glDepthMask(true);
		RenderHelper.disableStandardItemLighting();
    }
	
	public static void drawText(String text, int x, int y) {
		RenderHelper.enableGUIStandardItemLighting();
		GL11.glPushMatrix();
		GL11.glEnable(GL11.GL_BLEND);
		GL11.glEnable(32826);
        GL11.glDisable(2929);
        GL11.glDisable(2896);
        GL11.glDepthMask(false);
        Minecraft.getMinecraft().fontRenderer.drawStringWithShadow(text, x, y, 0xffffff);
        GL11.glEnable(2929);
        GL11.glEnable(2896);
        GL11.glDisable(32826);
        GL11.glDepthMask(true);
        GL11.glDisable(GL11.GL_BLEND);
        GL11.glPopMatrix();
        RenderHelper.disableStandardItemLighting();
	}

	public static void update() {
	}
}